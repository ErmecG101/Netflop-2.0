{"ast":null,"code":"import _get from \"D:\\\\Otavio\\\\Projects\\\\Programando\\\\netflop-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\get.js\";\nimport _getPrototypeOf from \"D:\\\\Otavio\\\\Projects\\\\Programando\\\\netflop-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _inherits from \"D:\\\\Otavio\\\\Projects\\\\Programando\\\\netflop-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"D:\\\\Otavio\\\\Projects\\\\Programando\\\\netflop-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _createForOfIteratorHelper from \"D:\\\\Otavio\\\\Projects\\\\Programando\\\\netflop-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";\nimport _slicedToArray from \"D:\\\\Otavio\\\\Projects\\\\Programando\\\\netflop-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\nimport _classCallCheck from \"D:\\\\Otavio\\\\Projects\\\\Programando\\\\netflop-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Otavio\\\\Projects\\\\Programando\\\\netflop-ui\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _regeneratorRuntime from \"D:\\\\Otavio\\\\Projects\\\\Programando\\\\netflop-ui\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, forwardRef, Directive, Input, HostListener, Pipe, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\nvar config = new InjectionToken('config');\nvar NEW_CONFIG = new InjectionToken('NEW_CONFIG');\nvar INITIAL_CONFIG = new InjectionToken('INITIAL_CONFIG');\nvar initialConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: ['.', ','],\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // eslint-disable-next-line @typescript-eslint/quotes\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  leadZeroDateTime: false,\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d')\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*'\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]')\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]')\n    },\n    d: {\n      pattern: new RegExp('\\\\d')\n    },\n    m: {\n      pattern: new RegExp('\\\\d')\n    },\n    M: {\n      pattern: new RegExp('\\\\d')\n    },\n    H: {\n      pattern: new RegExp('\\\\d')\n    },\n    h: {\n      pattern: new RegExp('\\\\d')\n    },\n    s: {\n      pattern: new RegExp('\\\\d')\n    }\n  }\n};\nvar timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nvar withoutValidation = ['percent', 'Hh', 's0', 'm0', 'separator', 'd0/M0/0000', 'd0/M0', 'd0', 'M0'];\nvar MaskApplierService = /*#__PURE__*/(function () {\n  var MaskApplierService = /*#__PURE__*/function () {\n    function MaskApplierService(_config) {\n      var _this = this;\n\n      _classCallCheck(this, MaskApplierService);\n\n      this._config = _config;\n      this.maskExpression = '';\n      this.actualValue = '';\n      this.shownMaskExpression = '';\n\n      this._formatWithSeparators = function (str, thousandSeparatorChar, decimalChars, precision) {\n        var _a, _b;\n\n        var x = [];\n        var decimalChar = '';\n\n        if (Array.isArray(decimalChars)) {\n          var regExp = new RegExp(decimalChars.map(function (v) {\n            return '[\\\\^$.|?*+()'.indexOf(v) >= 0 ? \"\\\\\".concat(v) : v;\n          }).join('|'));\n          x = str.split(regExp);\n          decimalChar = (_b = (_a = str.match(regExp)) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : '';\n        } else {\n          x = str.split(decimalChars);\n          decimalChar = decimalChars;\n        }\n\n        var decimals = x.length > 1 ? \"\".concat(decimalChar).concat(x[1]) : '';\n        var res = x[0];\n\n        var separatorLimit = _this.separatorLimit.replace(/\\s/g, '');\n\n        if (separatorLimit && +separatorLimit) {\n          if (res[0] === '-') {\n            res = \"-\".concat(res.slice(1, res.length).slice(0, separatorLimit.length));\n          } else {\n            res = res.slice(0, separatorLimit.length);\n          }\n        }\n\n        var rgx = /(\\d+)(\\d{3})/;\n\n        while (thousandSeparatorChar && rgx.test(res)) {\n          res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n        }\n\n        if (precision === undefined) {\n          return res + decimals;\n        } else if (precision === 0) {\n          return res;\n        }\n\n        return res + decimals.substr(0, precision + 1);\n      };\n\n      this.percentage = function (str) {\n        return Number(str) >= 0 && Number(str) <= 100;\n      };\n\n      this.getPrecision = function (maskExpression) {\n        var x = maskExpression.split('.');\n\n        if (x.length > 1) {\n          return Number(x[x.length - 1]);\n        }\n\n        return Infinity;\n      };\n\n      this.checkAndRemoveSuffix = function (inputValue) {\n        var _a, _b, _c;\n\n        for (var i = ((_a = _this.suffix) === null || _a === void 0 ? void 0 : _a.length) - 1; i >= 0; i--) {\n          var substr = _this.suffix.substr(i, (_b = _this.suffix) === null || _b === void 0 ? void 0 : _b.length);\n\n          if (inputValue.includes(substr) && (i - 1 < 0 || !inputValue.includes(_this.suffix.substr(i - 1, (_c = _this.suffix) === null || _c === void 0 ? void 0 : _c.length)))) {\n            return inputValue.replace(substr, '');\n          }\n        }\n\n        return inputValue;\n      };\n\n      this.checkInputPrecision = function (inputValue, precision, decimalMarker) {\n        if (precision < Infinity) {\n          // TODO need think about decimalMarker\n          if (Array.isArray(decimalMarker)) {\n            var marker = decimalMarker.find(function (dm) {\n              return dm !== _this.thousandSeparator;\n            }); // eslint-disable-next-line no-param-reassign\n\n            decimalMarker = marker ? marker : decimalMarker[0];\n          }\n\n          var precisionRegEx = new RegExp(_this._charToRegExpExpression(decimalMarker) + \"\\\\d{\".concat(precision, \"}.*$\"));\n          var precisionMatch = inputValue.match(precisionRegEx);\n\n          if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n            var diff = precisionMatch[0].length - 1 - precision; // eslint-disable-next-line no-param-reassign\n\n            inputValue = inputValue.substring(0, inputValue.length - diff);\n          }\n\n          if (precision === 0 && _this._compareOrIncludes(inputValue[inputValue.length - 1], decimalMarker, _this.thousandSeparator)) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.substring(0, inputValue.length - 1);\n          }\n        }\n\n        return inputValue;\n      };\n\n      this._shift = new Set();\n      this.clearIfNotMatch = this._config.clearIfNotMatch;\n      this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n      this.maskSpecialCharacters = this._config.specialCharacters;\n      this.maskAvailablePatterns = this._config.patterns;\n      this.prefix = this._config.prefix;\n      this.suffix = this._config.suffix;\n      this.thousandSeparator = this._config.thousandSeparator;\n      this.decimalMarker = this._config.decimalMarker;\n      this.hiddenInput = this._config.hiddenInput;\n      this.showMaskTyped = this._config.showMaskTyped;\n      this.placeHolderCharacter = this._config.placeHolderCharacter;\n      this.validation = this._config.validation;\n      this.separatorLimit = this._config.separatorLimit;\n      this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n      this.leadZeroDateTime = this._config.leadZeroDateTime;\n    }\n\n    _createClass(MaskApplierService, [{\n      key: \"applyMaskWithPattern\",\n      value: function applyMaskWithPattern(inputValue, maskAndPattern) {\n        var _maskAndPattern = _slicedToArray(maskAndPattern, 2),\n            mask = _maskAndPattern[0],\n            customPattern = _maskAndPattern[1];\n\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n      }\n    }, {\n      key: \"applyMask\",\n      value: function applyMask(inputValue, maskExpression) {\n        var _this2 = this;\n\n        var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        var justPasted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        var backspaced = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n        var cb = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};\n\n        var _a, _b;\n\n        if (!maskExpression || typeof inputValue !== 'string') {\n          return '';\n        }\n\n        var cursor = 0;\n        var result = '';\n        var multi = false;\n        var backspaceShift = false;\n        var shift = 1;\n        var stepBack = false;\n\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n\n        if (!!this.suffix && (inputValue === null || inputValue === void 0 ? void 0 : inputValue.length) > 0) {\n          // eslint-disable-next-line no-param-reassign\n          inputValue = this.checkAndRemoveSuffix(inputValue);\n        }\n\n        var inputArray = inputValue.toString().split('');\n\n        if (maskExpression === 'IP') {\n          this.ipError = inputArray.filter(function (i) {\n            return i === '.';\n          }).length < 3 && inputArray.length < 7; // eslint-disable-next-line no-param-reassign\n\n          maskExpression = '099.099.099.099';\n        }\n\n        var arr = [];\n\n        for (var i = 0; i < inputValue.length; i++) {\n          if ((_a = inputValue[i]) === null || _a === void 0 ? void 0 : _a.match('\\\\d')) {\n            arr.push(inputValue[i]);\n          }\n        }\n\n        if (maskExpression === 'CPF_CNPJ') {\n          this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n\n          if (arr.length > 11) {\n            // eslint-disable-next-line no-param-reassign\n            maskExpression = '00.000.000/0000-00';\n          } else {\n            // eslint-disable-next-line no-param-reassign\n            maskExpression = '000.000.000-00';\n          }\n        }\n\n        if (maskExpression.startsWith('percent')) {\n          if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this._stripToDecimal(inputValue);\n            var precision = this.getPrecision(maskExpression); // eslint-disable-next-line no-param-reassign\n\n            inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n          }\n\n          if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n            var base = inputValue.substring(0, inputValue.indexOf('.') - 1); // eslint-disable-next-line no-param-reassign\n\n            inputValue = \"\".concat(base).concat(inputValue.substring(inputValue.indexOf('.'), inputValue.length));\n          }\n\n          if (this.percentage(inputValue)) {\n            result = inputValue;\n          } else {\n            result = inputValue.substring(0, inputValue.length - 1);\n          }\n        } else if (maskExpression.startsWith('separator')) {\n          if (inputValue.match('[wа-яА-Я]') || inputValue.match('[ЁёА-я]') || inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) || inputValue.match('[^A-Za-z0-9,]')) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this._stripToDecimal(inputValue);\n          } // eslint-disable-next-line no-param-reassign\n\n\n          inputValue = inputValue.length > 1 && inputValue[0] === '0' && !this._compareOrIncludes(inputValue[1], this.decimalMarker, this.thousandSeparator) && !backspaced ? inputValue.slice(1, inputValue.length) : inputValue;\n\n          if (backspaced) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this._compareOrIncludes(inputValue[inputValue.length - 1], this.decimalMarker, this.thousandSeparator) ? inputValue.slice(0, inputValue.length - 1) : inputValue;\n          } // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n          //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n\n\n          var thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n\n          var invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, ''); //.replace(decimalMarkerEscaped, '');\n\n          if (Array.isArray(this.decimalMarker)) {\n            var _iterator = _createForOfIteratorHelper(this.decimalMarker),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var marker = _step.value;\n                invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), '');\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          } else {\n            invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n          }\n\n          var invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n\n          if (inputValue.match(invalidCharRegexp) || inputValue.length === 1 && this._compareOrIncludes(inputValue, this.decimalMarker, this.thousandSeparator)) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = inputValue.substring(0, inputValue.length - 1);\n          }\n\n          var _precision = this.getPrecision(maskExpression); // eslint-disable-next-line no-param-reassign\n\n\n          inputValue = this.checkInputPrecision(inputValue, _precision, this.decimalMarker);\n          var strForSep = inputValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n          result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, _precision);\n          var commaShift = result.indexOf(',') - inputValue.indexOf(',');\n          var shiftStep = result.length - inputValue.length;\n\n          if (shiftStep > 0 && result[position] !== ',') {\n            backspaceShift = true;\n            var _shift = 0;\n\n            do {\n              this._shift.add(position + _shift);\n\n              _shift++;\n            } while (_shift < shiftStep);\n          } else if (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3) || !(result.indexOf('.') >= position && position > 3) && shiftStep <= 0) {\n            this._shift.clear();\n\n            backspaceShift = true;\n            shift = shiftStep; // eslint-disable-next-line no-param-reassign\n\n            position += shiftStep;\n\n            this._shift.add(position);\n          } else {\n            this._shift.clear();\n          }\n        } else {\n          for ( // eslint-disable-next-line\n          var _i = 0, inputSymbol = inputArray[0]; _i < inputArray.length; _i++, inputSymbol = inputArray[_i]) {\n            if (cursor === maskExpression.length) {\n              break;\n            }\n\n            if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n              result += inputSymbol;\n              cursor += 2;\n            } else if (maskExpression[cursor + 1] === '*' && multi && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n              result += inputSymbol;\n              cursor += 3;\n              multi = false;\n            } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n              result += inputSymbol;\n              multi = true;\n            } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n              result += inputSymbol;\n              cursor += 3;\n            } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n              if (maskExpression[cursor] === 'H') {\n                if (Number(inputSymbol) > 2) {\n                  cursor += 1;\n\n                  this._shiftStep(maskExpression, cursor, inputArray.length);\n\n                  _i--;\n\n                  if (this.leadZeroDateTime) {\n                    result += '0';\n                  }\n\n                  continue;\n                }\n              }\n\n              if (maskExpression[cursor] === 'h') {\n                if (result === '2' && Number(inputSymbol) > 3) {\n                  cursor += 1;\n                  _i--;\n                  continue;\n                }\n              }\n\n              if (maskExpression[cursor] === 'm') {\n                if (Number(inputSymbol) > 5) {\n                  cursor += 1;\n\n                  this._shiftStep(maskExpression, cursor, inputArray.length);\n\n                  _i--;\n\n                  if (this.leadZeroDateTime) {\n                    result += '0';\n                  }\n\n                  continue;\n                }\n              }\n\n              if (maskExpression[cursor] === 's') {\n                if (Number(inputSymbol) > 5) {\n                  cursor += 1;\n\n                  this._shiftStep(maskExpression, cursor, inputArray.length);\n\n                  _i--;\n\n                  if (this.leadZeroDateTime) {\n                    result += '0';\n                  }\n\n                  continue;\n                }\n              }\n\n              var daysCount = 31;\n\n              if (maskExpression[cursor] === 'd') {\n                if (Number(inputSymbol) > 3 && this.leadZeroDateTime || Number(inputValue.slice(cursor, cursor + 2)) > daysCount || inputValue[cursor + 1] === '/') {\n                  cursor += 1;\n\n                  this._shiftStep(maskExpression, cursor, inputArray.length);\n\n                  _i--;\n\n                  if (this.leadZeroDateTime) {\n                    result += '0';\n                  }\n\n                  continue;\n                }\n              }\n\n              if (maskExpression[cursor] === 'M') {\n                var monthsCount = 12; // mask without day\n\n                var withoutDays = cursor === 0 && (Number(inputSymbol) > 2 || Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/'); // day<10 && month<12 for input\n\n                var day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') && (inputValue[cursor - 2] === '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount && inputValue[cursor] !== '/' || inputValue[cursor] === '/' || inputValue[cursor - 3] === '/' && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount && inputValue[cursor - 1] !== '/' || inputValue[cursor - 1] === '/'); // 10<day<31 && month<12 for input\n\n                var day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] === '/' && (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/'); // day<10 && month<12 for paste whole data\n\n                var day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && !inputValue.slice(cursor - 2, cursor).includes('/') && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount; // 10<day<31 && month<12 for paste whole data\n\n                var day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] !== '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n\n                if (Number(inputSymbol) > 1 && this.leadZeroDateTime || withoutDays || day1monthInput || day2monthInput || day1monthPaste || day2monthPaste) {\n                  cursor += 1;\n\n                  this._shiftStep(maskExpression, cursor, inputArray.length);\n\n                  _i--;\n\n                  if (this.leadZeroDateTime) {\n                    result += '0';\n                  }\n\n                  continue;\n                }\n              }\n\n              result += inputSymbol;\n              cursor++;\n            } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n              result += maskExpression[cursor];\n              cursor++;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              _i--;\n            } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 && this.maskAvailablePatterns[maskExpression[cursor]] && ((_b = this.maskAvailablePatterns[maskExpression[cursor]]) === null || _b === void 0 ? void 0 : _b.optional)) {\n              if (!!inputArray[cursor] && maskExpression !== '099.099.099.099' && maskExpression !== '000.000.000-00' && maskExpression !== '00.000.000/0000-00') {\n                result += inputArray[cursor];\n              }\n\n              cursor++;\n              _i--;\n            } else if (this.maskExpression[cursor + 1] === '*' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n              cursor += 3;\n              result += inputSymbol;\n            } else if (this.maskExpression[cursor + 1] === '?' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n              cursor += 3;\n              result += inputSymbol;\n            } else if (this.showMaskTyped && this.maskSpecialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter) {\n              stepBack = true;\n            }\n          }\n        }\n\n        if (result.length + 1 === maskExpression.length && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n          result += maskExpression[maskExpression.length - 1];\n        }\n\n        var newPosition = position + 1;\n\n        while (this._shift.has(newPosition)) {\n          shift++;\n          newPosition++;\n        }\n\n        var actualShift = justPasted ? cursor : this._shift.has(position) ? shift : 0;\n\n        if (stepBack) {\n          actualShift--;\n        }\n\n        cb(actualShift, backspaceShift);\n\n        if (shift < 0) {\n          this._shift.clear();\n        }\n\n        var onlySpecial = false;\n\n        if (backspaced) {\n          onlySpecial = inputArray.every(function (char) {\n            return _this2.maskSpecialCharacters.includes(char);\n          });\n        }\n\n        var res = \"\".concat(this.prefix).concat(onlySpecial ? '' : result).concat(this.suffix);\n\n        if (result.length === 0) {\n          res = \"\".concat(this.prefix).concat(result);\n        }\n\n        return res;\n      }\n    }, {\n      key: \"_findSpecialChar\",\n      value: function _findSpecialChar(inputSymbol) {\n        return this.maskSpecialCharacters.find(function (val) {\n          return val === inputSymbol;\n        });\n      }\n    }, {\n      key: \"_checkSymbolMask\",\n      value: function _checkSymbolMask(inputSymbol, maskSymbol) {\n        this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n        return this.maskAvailablePatterns[maskSymbol] && this.maskAvailablePatterns[maskSymbol].pattern && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\n      }\n    }, {\n      key: \"_stripToDecimal\",\n      value: function _stripToDecimal(str) {\n        var _this3 = this;\n\n        return str.split('').filter(function (i, idx) {\n          return i.match('^-?\\\\d') || i.match('\\\\s') || i === '.' || i === ',' || i === '-' && idx === 0 && _this3.allowNegativeNumbers;\n        }).join('');\n      }\n    }, {\n      key: \"_charToRegExpExpression\",\n      value: function _charToRegExpExpression(char) {\n        // if (Array.isArray(char)) {\n        // \treturn char.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|');\n        // }\n        if (char) {\n          var charsToEscape = '[\\\\^$.|?*+()';\n          return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? \"\\\\\".concat(char) : char;\n        }\n\n        return char;\n      }\n    }, {\n      key: \"_shiftStep\",\n      value: function _shiftStep(maskExpression, cursor, inputLength) {\n        var shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n\n        this._shift.add(shiftStep + this.prefix.length || 0);\n      }\n    }, {\n      key: \"_compareOrIncludes\",\n      value: function _compareOrIncludes(value, comparedValue, excludedValue) {\n        return Array.isArray(comparedValue) ? comparedValue.filter(function (v) {\n          return v !== excludedValue;\n        }).includes(value) : value === comparedValue;\n      }\n    }]);\n\n    return MaskApplierService;\n  }();\n\n  MaskApplierService.ɵfac = function MaskApplierService_Factory(t) {\n    return new (t || MaskApplierService)(i0.ɵɵinject(config));\n  };\n\n  MaskApplierService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MaskApplierService,\n    factory: MaskApplierService.ɵfac\n  });\n  return MaskApplierService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar MaskService = /*#__PURE__*/(function () {\n  var MaskService = /*#__PURE__*/function (_MaskApplierService) {\n    _inherits(MaskService, _MaskApplierService);\n\n    var _super = _createSuper(MaskService);\n\n    function MaskService(document, _config, _elementRef, _renderer) {\n      var _this4;\n\n      _classCallCheck(this, MaskService);\n\n      _this4 = _super.call(this, _config);\n      _this4.document = document;\n      _this4._config = _config;\n      _this4._elementRef = _elementRef;\n      _this4._renderer = _renderer;\n      _this4.maskExpression = '';\n      _this4.isNumberValue = false;\n      _this4.placeHolderCharacter = '_';\n      _this4.maskIsShown = '';\n      _this4.selStart = null;\n      _this4.selEnd = null;\n      /**\n       * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n       * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n       */\n\n      _this4.writingValue = false;\n      _this4.maskChanged = false;\n\n      _this4.onChange = function (_) {};\n\n      return _this4;\n    } // eslint-disable-next-line complexity\n\n\n    _createClass(MaskService, [{\n      key: \"applyMask\",\n      value: function applyMask(inputValue, maskExpression) {\n        var _this5 = this;\n\n        var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        var justPasted = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        var backspaced = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n        var cb = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};\n\n        if (!maskExpression) {\n          return inputValue;\n        }\n\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\n          this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n\n        if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n          this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n\n        if (!inputValue && this.showMaskTyped) {\n          this.formControlResult(this.prefix);\n          return this.prefix + this.maskIsShown;\n        }\n\n        var getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n        var newInputValue = '';\n\n        if (this.hiddenInput && !this.writingValue) {\n          var actualResult = this.actualValue.split(''); // eslint-disable  @typescript-eslint/no-unused-expressions\n          // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n\n          inputValue !== '' && actualResult.length ? typeof this.selStart === 'number' && typeof this.selEnd === 'number' ? inputValue.length > actualResult.length ? actualResult.splice(this.selStart, 0, getSymbol) : inputValue.length < actualResult.length ? actualResult.length - inputValue.length === 1 ? actualResult.splice(this.selStart - 1, 1) : actualResult.splice(this.selStart, this.selEnd - this.selStart) : null : null : actualResult = [];\n\n          if (this.showMaskTyped) {\n            // eslint-disable-next-line no-param-reassign\n            inputValue = this.removeMask(inputValue);\n          } // eslint-enable  @typescript-eslint/no-unused-expressions\n\n\n          newInputValue = this.actualValue.length && actualResult.length <= inputValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n        }\n\n        newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n\n        var result = _get(_getPrototypeOf(MaskService.prototype), \"applyMask\", this).call(this, newInputValue, maskExpression, position, justPasted, backspaced, cb);\n\n        this.actualValue = this.getActualValue(result); // handle some separator implications:\n        // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n\n        if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n          this.decimalMarker = ',';\n        } // b) remove decimal marker from list of special characters to mask\n\n\n        if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n          this.maskSpecialCharacters = this.maskSpecialCharacters.filter(function (item) {\n            return !_this5._compareOrIncludes(item, _this5.decimalMarker, _this5.thousandSeparator);\n          });\n        }\n\n        this.formControlResult(result);\n\n        if (!this.showMaskTyped) {\n          if (this.hiddenInput) {\n            return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n          }\n\n          return result;\n        }\n\n        var resLen = result.length;\n        var prefNmask = this.prefix + this.maskIsShown;\n\n        if (this.maskExpression.includes('H')) {\n          var countSkipedSymbol = this._numberSkipedSymbols(result);\n\n          return result + prefNmask.slice(resLen + countSkipedSymbol);\n        } else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n          return result + prefNmask;\n        }\n\n        return result + prefNmask.slice(resLen);\n      } // get the number of characters that were shifted\n\n    }, {\n      key: \"_numberSkipedSymbols\",\n      value: function _numberSkipedSymbols(value) {\n        var regex = /(^|\\D)(\\d\\D)/g;\n        var match = regex.exec(value);\n        var countSkipedSymbol = 0;\n\n        while (match != null) {\n          countSkipedSymbol += 1;\n          match = regex.exec(value);\n        }\n\n        return countSkipedSymbol;\n      }\n    }, {\n      key: \"applyValueChanges\",\n      value: function applyValueChanges() {\n        var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var justPasted = arguments.length > 1 ? arguments[1] : undefined;\n        var backspaced = arguments.length > 2 ? arguments[2] : undefined;\n        var cb = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n        var formElement = this._elementRef.nativeElement;\n        formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n\n        if (formElement === this.document.activeElement) {\n          return;\n        }\n\n        this.clearIfNotMatchFn();\n      }\n    }, {\n      key: \"hideInput\",\n      value: function hideInput(inputValue, maskExpression) {\n        var _this6 = this;\n\n        return inputValue.split('').map(function (curr, index) {\n          var _a, _b;\n\n          if (_this6.maskAvailablePatterns && _this6.maskAvailablePatterns[maskExpression[index]] && ((_a = _this6.maskAvailablePatterns[maskExpression[index]]) === null || _a === void 0 ? void 0 : _a.symbol)) {\n            return (_b = _this6.maskAvailablePatterns[maskExpression[index]]) === null || _b === void 0 ? void 0 : _b.symbol;\n          }\n\n          return curr;\n        }).join('');\n      } // this function is not necessary, it checks result against maskExpression\n\n    }, {\n      key: \"getActualValue\",\n      value: function getActualValue(res) {\n        var _this7 = this;\n\n        var compare = res.split('').filter(function (symbol, i) {\n          return _this7._checkSymbolMask(symbol, _this7.maskExpression[i]) || _this7.maskSpecialCharacters.includes(_this7.maskExpression[i]) && symbol === _this7.maskExpression[i];\n        });\n\n        if (compare.join('') === res) {\n          return compare.join('');\n        }\n\n        return res;\n      }\n    }, {\n      key: \"shiftTypedSymbols\",\n      value: function shiftTypedSymbols(inputValue) {\n        var _this8 = this;\n\n        var symbolToReplace = '';\n        var newInputValue = inputValue && inputValue.split('').map(function (currSymbol, index) {\n          if (_this8.maskSpecialCharacters.includes(inputValue[index + 1]) && inputValue[index + 1] !== _this8.maskExpression[index + 1]) {\n            symbolToReplace = currSymbol;\n            return inputValue[index + 1];\n          }\n\n          if (symbolToReplace.length) {\n            var replaceSymbol = symbolToReplace;\n            symbolToReplace = '';\n            return replaceSymbol;\n          }\n\n          return currSymbol;\n        }) || [];\n        return newInputValue.join('');\n      }\n    }, {\n      key: \"showMaskInInput\",\n      value: function showMaskInInput(inputVal) {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n          if (this.maskExpression.length !== this.shownMaskExpression.length) {\n            throw new Error('Mask expression must match mask placeholder length');\n          } else {\n            return this.shownMaskExpression;\n          }\n        } else if (this.showMaskTyped) {\n          if (inputVal) {\n            if (this.maskExpression === 'IP') {\n              return this._checkForIp(inputVal);\n            }\n\n            if (this.maskExpression === 'CPF_CNPJ') {\n              return this._checkForCpfCnpj(inputVal);\n            }\n          }\n\n          return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n        }\n\n        return '';\n      }\n    }, {\n      key: \"clearIfNotMatchFn\",\n      value: function clearIfNotMatchFn() {\n        var formElement = this._elementRef.nativeElement;\n\n        if (this.clearIfNotMatch && this.prefix.length + this.maskExpression.length + this.suffix.length !== formElement.value.replace(/_/g, '').length) {\n          this.formElementProperty = ['value', ''];\n          this.applyMask(formElement.value, this.maskExpression);\n        }\n      }\n    }, {\n      key: \"formElementProperty\",\n      set: function set(_ref) {\n        var _this9 = this;\n\n        var _ref2 = _slicedToArray(_ref, 2),\n            name = _ref2[0],\n            value = _ref2[1];\n\n        Promise.resolve().then(function () {\n          return _this9._renderer.setProperty(_this9._elementRef.nativeElement, name, value);\n        });\n      }\n    }, {\n      key: \"checkSpecialCharAmount\",\n      value: function checkSpecialCharAmount(mask) {\n        var _this10 = this;\n\n        var chars = mask.split('').filter(function (item) {\n          return _this10._findSpecialChar(item);\n        });\n        return chars.length;\n      }\n    }, {\n      key: \"removeMask\",\n      value: function removeMask(inputValue) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter));\n      }\n    }, {\n      key: \"_checkForIp\",\n      value: function _checkForIp(inputVal) {\n        var _a;\n\n        if (inputVal === '#') {\n          return \"\".concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter);\n        }\n\n        var arr = [];\n\n        for (var i = 0; i < inputVal.length; i++) {\n          if ((_a = inputVal[i]) === null || _a === void 0 ? void 0 : _a.match('\\\\d')) {\n            arr.push(inputVal[i]);\n          }\n        }\n\n        if (arr.length <= 3) {\n          return \"\".concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter);\n        }\n\n        if (arr.length > 3 && arr.length <= 6) {\n          return \"\".concat(this.placeHolderCharacter, \".\").concat(this.placeHolderCharacter);\n        }\n\n        if (arr.length > 6 && arr.length <= 9) {\n          return this.placeHolderCharacter;\n        }\n\n        if (arr.length > 9 && arr.length <= 12) {\n          return '';\n        }\n\n        return '';\n      }\n    }, {\n      key: \"_checkForCpfCnpj\",\n      value: function _checkForCpfCnpj(inputVal) {\n        var _a;\n\n        var cpf = \"\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \".\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \".\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \"-\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter);\n        var cnpj = \"\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \".\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \".\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \"/\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter).concat(this.placeHolderCharacter) + \"-\".concat(this.placeHolderCharacter).concat(this.placeHolderCharacter);\n\n        if (inputVal === '#') {\n          return cpf;\n        }\n\n        var arr = [];\n\n        for (var i = 0; i < inputVal.length; i++) {\n          if ((_a = inputVal[i]) === null || _a === void 0 ? void 0 : _a.match('\\\\d')) {\n            arr.push(inputVal[i]);\n          }\n        }\n\n        if (arr.length <= 3) {\n          return cpf.slice(arr.length, cpf.length);\n        }\n\n        if (arr.length > 3 && arr.length <= 6) {\n          return cpf.slice(arr.length + 1, cpf.length);\n        }\n\n        if (arr.length > 6 && arr.length <= 9) {\n          return cpf.slice(arr.length + 2, cpf.length);\n        }\n\n        if (arr.length > 9 && arr.length < 11) {\n          return cpf.slice(arr.length + 3, cpf.length);\n        }\n\n        if (arr.length === 11) {\n          return '';\n        }\n\n        if (arr.length === 12) {\n          if (inputVal.length === 17) {\n            return cnpj.slice(16, cnpj.length);\n          }\n\n          return cnpj.slice(15, cnpj.length);\n        }\n\n        if (arr.length > 12 && arr.length <= 14) {\n          return cnpj.slice(arr.length + 4, cnpj.length);\n        }\n\n        return '';\n      }\n      /**\n       * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n       * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n       * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n       * model value too. Therefore, we don't trigger onChange in this scenario.\n       * @param inputValue the current form input value\n       */\n\n    }, {\n      key: \"formControlResult\",\n      value: function formControlResult(inputValue) {\n        if (this.writingValue || this.maskChanged) {\n          this.maskChanged = false;\n          return;\n        }\n\n        if (Array.isArray(this.dropSpecialCharacters)) {\n          this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n        } else if (this.dropSpecialCharacters) {\n          this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n        } else {\n          this.onChange(this._removeSuffix(inputValue));\n        }\n      }\n    }, {\n      key: \"_toNumber\",\n      value: function _toNumber(value) {\n        if (!this.isNumberValue || value === '') {\n          return value;\n        }\n\n        var num = Number(value);\n        return Number.isNaN(num) ? value : num;\n      }\n    }, {\n      key: \"_removeMask\",\n      value: function _removeMask(value, specialCharactersForRemove) {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n      }\n    }, {\n      key: \"_removePrefix\",\n      value: function _removePrefix(value) {\n        if (!this.prefix) {\n          return value;\n        }\n\n        return value ? value.replace(this.prefix, '') : value;\n      }\n    }, {\n      key: \"_removeSuffix\",\n      value: function _removeSuffix(value) {\n        if (!this.suffix) {\n          return value;\n        }\n\n        return value ? value.replace(this.suffix, '') : value;\n      }\n    }, {\n      key: \"_retrieveSeparatorValue\",\n      value: function _retrieveSeparatorValue(result) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n      }\n    }, {\n      key: \"_regExpForRemove\",\n      value: function _regExpForRemove(specialCharactersForRemove) {\n        return new RegExp(specialCharactersForRemove.map(function (item) {\n          return \"\\\\\".concat(item);\n        }).join('|'), 'gi');\n      }\n    }, {\n      key: \"_checkSymbols\",\n      value: function _checkSymbols(result) {\n        if (result === '') {\n          return result;\n        }\n\n        var separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n\n        var separatorValue = this._retrieveSeparatorValue(result);\n\n        if (this.decimalMarker !== '.' && !Array.isArray(this.decimalMarker)) {\n          separatorValue = separatorValue.replace(this.decimalMarker, '.');\n        }\n\n        if (!this.isNumberValue) {\n          return separatorValue;\n        }\n\n        if (separatorPrecision) {\n          if (result === this.decimalMarker) {\n            return null;\n          }\n\n          return this._checkPrecision(this.maskExpression, separatorValue);\n        } else {\n          return Number(separatorValue);\n        }\n      } // TODO should think about helpers or separting decimal precision to own property\n\n    }, {\n      key: \"_retrieveSeparatorPrecision\",\n      value: function _retrieveSeparatorPrecision(maskExpretion) {\n        var matcher = maskExpretion.match(new RegExp(\"^separator\\\\.([^d]*)\"));\n        return matcher ? Number(matcher[1]) : null;\n      }\n    }, {\n      key: \"_checkPrecision\",\n      value: function _checkPrecision(separatorExpression, separatorValue) {\n        if (separatorExpression.indexOf('2') > 0) {\n          return Number(separatorValue).toFixed(2);\n        }\n\n        return Number(separatorValue);\n      }\n    }]);\n\n    return MaskService;\n  }(MaskApplierService);\n\n  MaskService.ɵfac = function MaskService_Factory(t) {\n    return new (t || MaskService)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(config), i0.ɵɵinject(i0.ElementRef), i0.ɵɵinject(i0.Renderer2));\n  };\n\n  MaskService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MaskService,\n    factory: MaskService.ɵfac\n  });\n  return MaskService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar MaskDirective = /*#__PURE__*/(function () {\n  var MaskDirective = /*#__PURE__*/function () {\n    function MaskDirective(document, _maskService, _config) {\n      _classCallCheck(this, MaskDirective);\n\n      this.document = document;\n      this._maskService = _maskService;\n      this._config = _config; // eslint-disable-next-line @angular-eslint/no-input-rename\n\n      this.maskExpression = '';\n      this.specialCharacters = [];\n      this.patterns = {};\n      this.prefix = '';\n      this.suffix = '';\n      this.thousandSeparator = ' ';\n      this.decimalMarker = '.';\n      this.dropSpecialCharacters = null;\n      this.hiddenInput = null;\n      this.showMaskTyped = null;\n      this.placeHolderCharacter = null;\n      this.shownMaskExpression = null;\n      this.showTemplate = null;\n      this.clearIfNotMatch = null;\n      this.validation = null;\n      this.separatorLimit = null;\n      this.allowNegativeNumbers = null;\n      this.leadZeroDateTime = null;\n      this._maskValue = '';\n      this._position = null;\n      this._maskExpressionArray = [];\n      this._justPasted = false;\n\n      this.onChange = function (_) {};\n\n      this.onTouch = function () {};\n    }\n\n    _createClass(MaskDirective, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var maskExpression = changes.maskExpression,\n            specialCharacters = changes.specialCharacters,\n            patterns = changes.patterns,\n            prefix = changes.prefix,\n            suffix = changes.suffix,\n            thousandSeparator = changes.thousandSeparator,\n            decimalMarker = changes.decimalMarker,\n            dropSpecialCharacters = changes.dropSpecialCharacters,\n            hiddenInput = changes.hiddenInput,\n            showMaskTyped = changes.showMaskTyped,\n            placeHolderCharacter = changes.placeHolderCharacter,\n            shownMaskExpression = changes.shownMaskExpression,\n            showTemplate = changes.showTemplate,\n            clearIfNotMatch = changes.clearIfNotMatch,\n            validation = changes.validation,\n            separatorLimit = changes.separatorLimit,\n            allowNegativeNumbers = changes.allowNegativeNumbers,\n            leadZeroDateTime = changes.leadZeroDateTime;\n\n        if (maskExpression) {\n          if (maskExpression.currentValue !== maskExpression.previousValue && !maskExpression.firstChange) {\n            this._maskService.maskChanged = true;\n          }\n\n          if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n            this._maskExpressionArray = maskExpression.currentValue.split('||').sort(function (a, b) {\n              return a.length - b.length;\n            });\n            this._maskValue = this._maskExpressionArray[0];\n            this.maskExpression = this._maskExpressionArray[0];\n            this._maskService.maskExpression = this._maskExpressionArray[0];\n          } else {\n            this._maskExpressionArray = [];\n            this._maskValue = maskExpression.currentValue || '';\n            this._maskService.maskExpression = this._maskValue;\n          }\n        }\n\n        if (specialCharacters) {\n          if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n            return;\n          } else {\n            this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n          }\n        } // Only overwrite the mask available patterns if a pattern has actually been passed in\n\n\n        if (patterns && patterns.currentValue) {\n          this._maskService.maskAvailablePatterns = patterns.currentValue;\n        }\n\n        if (prefix) {\n          this._maskService.prefix = prefix.currentValue;\n        }\n\n        if (suffix) {\n          this._maskService.suffix = suffix.currentValue;\n        }\n\n        if (thousandSeparator) {\n          this._maskService.thousandSeparator = thousandSeparator.currentValue;\n        }\n\n        if (decimalMarker) {\n          this._maskService.decimalMarker = decimalMarker.currentValue;\n        }\n\n        if (dropSpecialCharacters) {\n          this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n\n        if (hiddenInput) {\n          this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n\n        if (showMaskTyped) {\n          this._maskService.showMaskTyped = showMaskTyped.currentValue;\n        }\n\n        if (placeHolderCharacter) {\n          this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n        }\n\n        if (shownMaskExpression) {\n          this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n\n        if (showTemplate) {\n          this._maskService.showTemplate = showTemplate.currentValue;\n        }\n\n        if (clearIfNotMatch) {\n          this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n\n        if (validation) {\n          this._maskService.validation = validation.currentValue;\n        }\n\n        if (separatorLimit) {\n          this._maskService.separatorLimit = separatorLimit.currentValue;\n        }\n\n        if (allowNegativeNumbers) {\n          this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n\n          if (this._maskService.allowNegativeNumbers) {\n            this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter(function (c) {\n              return c !== '-';\n            });\n          }\n        }\n\n        if (leadZeroDateTime) {\n          this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n        }\n\n        this._applyMask();\n      } // eslint-disable-next-line complexity\n\n    }, {\n      key: \"validate\",\n      value: function validate(_ref3) {\n        var _this11 = this;\n\n        var value = _ref3.value;\n\n        if (!this._maskService.validation || !this._maskValue) {\n          return null;\n        }\n\n        if (this._maskService.ipError) {\n          return this._createValidationError(value);\n        }\n\n        if (this._maskService.cpfCnpjError) {\n          return this._createValidationError(value);\n        }\n\n        if (this._maskValue.startsWith('separator')) {\n          return null;\n        }\n\n        if (withoutValidation.includes(this._maskValue)) {\n          return null;\n        }\n\n        if (this._maskService.clearIfNotMatch) {\n          return null;\n        }\n\n        if (timeMasks.includes(this._maskValue)) {\n          return this._validateTime(value);\n        }\n\n        if (value && value.toString().length >= 1) {\n          var counterOfOpt = 0;\n\n          var _loop = function _loop(key) {\n            if (_this11._maskService.maskAvailablePatterns[key].optional) {\n              if (_this11._maskValue.indexOf(key) !== _this11._maskValue.lastIndexOf(key)) {\n                var opt = _this11._maskValue.split('').filter(function (i) {\n                  return i === key;\n                }).join('');\n\n                counterOfOpt += opt.length;\n              } else if (_this11._maskValue.indexOf(key) !== -1) {\n                counterOfOpt++;\n              }\n\n              if (_this11._maskValue.indexOf(key) !== -1 && value.toString().length >= _this11._maskValue.indexOf(key)) {\n                return {\n                  v: null\n                };\n              }\n\n              if (counterOfOpt === _this11._maskValue.length) {\n                return {\n                  v: null\n                };\n              }\n            }\n          };\n\n          for (var key in this._maskService.maskAvailablePatterns) {\n            var _ret = _loop(key);\n\n            if (typeof _ret === \"object\") return _ret.v;\n          }\n\n          if (this._maskValue.indexOf('{') === 1 && value.toString().length === this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4) {\n            return null;\n          }\n\n          if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n            return null;\n          } else if (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*') || this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?') || this._maskValue.indexOf('{') === 1) {\n            return this._createValidationError(value);\n          }\n\n          if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n            var length = this._maskService.dropSpecialCharacters ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt : this._maskValue.length - counterOfOpt;\n\n            if (value.toString().length < length) {\n              return this._createValidationError(value);\n            }\n          }\n        }\n\n        return null;\n      }\n    }, {\n      key: \"onPaste\",\n      value: function onPaste() {\n        this._justPasted = true;\n      }\n    }, {\n      key: \"onModelChange\",\n      value: function onModelChange(value) {\n        // on form reset we need to update the actualValue\n        if (!value && this._maskService.actualValue) {\n          this._maskService.actualValue = this._maskService.getActualValue('');\n        }\n      }\n    }, {\n      key: \"onInput\",\n      value: function onInput(e) {\n        var _this12 = this;\n\n        var el = e.target;\n        this._inputValue = el.value;\n\n        this._setMask();\n\n        if (!this._maskValue) {\n          this.onChange(el.value);\n          return;\n        }\n\n        var position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n        var caretShift = 0;\n        var backspaceShift = false;\n\n        this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace' || this._code === 'Delete', function (shift, _backspaceShift) {\n          _this12._justPasted = false;\n          caretShift = shift;\n          backspaceShift = _backspaceShift;\n        }); // only set the selection if the element is active\n\n\n        if (this.document.activeElement !== el) {\n          return;\n        }\n\n        this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        var positionToApply = this._position ? this._inputValue.length + position + caretShift : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n\n        if (positionToApply > this._getActualInputLength()) {\n          positionToApply = this._getActualInputLength();\n        }\n\n        if (positionToApply < 0) {\n          positionToApply = 0;\n        }\n\n        el.setSelectionRange(positionToApply, positionToApply);\n        this._position = null;\n      }\n    }, {\n      key: \"onBlur\",\n      value: function onBlur() {\n        if (this._maskValue) {\n          this._maskService.clearIfNotMatchFn();\n        }\n\n        this.onTouch();\n      }\n    }, {\n      key: \"onClick\",\n      value: function onClick(e) {\n        if (!this._maskValue) {\n          return;\n        }\n\n        var el = e.target;\n        var posStart = 0;\n        var posEnd = 0;\n\n        if (el !== null && el.selectionStart !== null && el.selectionStart === el.selectionEnd && el.selectionStart > this._maskService.prefix.length && // eslint-disable-next-line\n        e.keyCode !== 38) {\n          if (this._maskService.showMaskTyped) {\n            // We are showing the mask in the input\n            this._maskService.maskIsShown = this._maskService.showMaskInInput();\n\n            if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n              // the input ONLY contains the mask, so position the cursor at the start\n              el.focus();\n              el.setSelectionRange(posStart, posEnd);\n            } else {\n              // the input contains some characters already\n              if (el.selectionStart > this._maskService.actualValue.length) {\n                // if the user clicked beyond our value's length, position the cursor at the end of our value\n                el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n              }\n            }\n          }\n        }\n\n        var nextValue = !el.value || el.value === this._maskService.prefix ? this._maskService.prefix + this._maskService.maskIsShown : el.value;\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n\n        if (el.value !== nextValue) {\n          el.value = nextValue;\n        }\n        /** fix of cursor position with prefix when mouse click occur */\n\n\n        if ((el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n          el.selectionStart = this._maskService.prefix.length;\n          return;\n        }\n        /** select only inserted text */\n\n\n        if (el.selectionEnd > this._getActualInputLength()) {\n          el.selectionEnd = this._getActualInputLength();\n        }\n      } // eslint-disable-next-line complexity\n\n    }, {\n      key: \"onKeyDown\",\n      value: function onKeyDown(e) {\n        var _a;\n\n        if (!this._maskValue) {\n          return;\n        }\n\n        this._code = e.code ? e.code : e.key;\n        var el = e.target;\n        this._inputValue = el.value;\n\n        this._setMask();\n\n        if (e.keyCode === 38) {\n          e.preventDefault();\n        }\n\n        if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n          if (e.keyCode === 8 && el.value.length === 0) {\n            el.selectionStart = el.selectionEnd;\n          }\n\n          if (e.keyCode === 8 && el.selectionStart !== 0) {\n            // If specialChars is false, (shouldn't ever happen) then set to the defaults\n            this.specialCharacters = ((_a = this.specialCharacters) === null || _a === void 0 ? void 0 : _a.length) ? this.specialCharacters : this._config.specialCharacters;\n\n            if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n              el.setSelectionRange(this.prefix.length, el.selectionEnd);\n            } else {\n              if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n                while (this.specialCharacters.includes(this._inputValue[el.selectionStart - 1].toString()) && (this.prefix.length >= 1 && el.selectionStart > this.prefix.length || this.prefix.length === 0)) {\n                  el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n                }\n              }\n            }\n          }\n\n          this.checkSelectionOnDeletion(el);\n\n          if (this._maskService.prefix.length && el.selectionStart <= this._maskService.prefix.length && el.selectionEnd <= this._maskService.prefix.length) {\n            e.preventDefault();\n          }\n\n          var cursorStart = el.selectionStart;\n\n          if (e.keyCode === 8 && !el.readOnly && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n            this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n\n            this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n          }\n        }\n\n        if (!!this.suffix && this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n          el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        } else if (e.keyCode === 65 && e.ctrlKey || e.keyCode === 65 && e.metaKey // Cmd + A (Mac)\n        ) {\n          el.setSelectionRange(0, this._getActualInputLength());\n          e.preventDefault();\n        }\n\n        this._maskService.selStart = el.selectionStart;\n        this._maskService.selEnd = el.selectionEnd;\n      }\n      /** It writes the value in the input */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(inputValue) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n                    if ('disable' in inputValue) {\n                      this.setDisabledState(Boolean(inputValue.disable));\n                    } // eslint-disable-next-line no-param-reassign\n\n\n                    inputValue = inputValue.value;\n                  }\n\n                  if (typeof inputValue === 'number') {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = String(inputValue);\n\n                    if (!Array.isArray(this.decimalMarker)) {\n                      // eslint-disable-next-line no-param-reassign\n                      inputValue = this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n                    }\n\n                    this._maskService.isNumberValue = true;\n                  }\n\n                  if (typeof inputValue !== 'string') {\n                    // eslint-disable-next-line no-param-reassign\n                    inputValue = '';\n                  }\n\n                  this._inputValue = inputValue;\n\n                  this._setMask();\n\n                  if (inputValue && this._maskService.maskExpression || this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped)) {\n                    // Let the service we know we are writing value so that triggering onChange function wont happen during applyMask\n                    this._maskService.writingValue = true;\n                    this._maskService.formElementProperty = ['value', this._maskService.applyMask(inputValue, this._maskService.maskExpression)]; // Let the service know we've finished writing value\n\n                    this._maskService.writingValue = false;\n                  } else {\n                    this._maskService.formElementProperty = ['value', inputValue];\n                  }\n\n                  this._inputValue = inputValue;\n\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChange = fn;\n        this._maskService.onChange = this.onChange;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouch = fn;\n      }\n    }, {\n      key: \"checkSelectionOnDeletion\",\n      value: function checkSelectionOnDeletion(el) {\n        el.selectionStart = Math.min(Math.max(this.prefix.length, el.selectionStart), this._inputValue.length - this.suffix.length);\n        el.selectionEnd = Math.min(Math.max(this.prefix.length, el.selectionEnd), this._inputValue.length - this.suffix.length);\n      }\n      /** It disables the input element */\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n      }\n    }, {\n      key: \"_repeatPatternSymbols\",\n      value: function _repeatPatternSymbols(maskExp) {\n        var _this13 = this;\n\n        return maskExp.match(/{[0-9]+}/) && maskExp.split('').reduce(function (accum, currval, index) {\n          _this13._start = currval === '{' ? index : _this13._start;\n\n          if (currval !== '}') {\n            return _this13._maskService._findSpecialChar(currval) ? accum + currval : accum;\n          }\n\n          _this13._end = index;\n          var repeatNumber = Number(maskExp.slice(_this13._start + 1, _this13._end));\n          var replaceWith = new Array(repeatNumber + 1).join(maskExp[_this13._start - 1]);\n          return accum + replaceWith;\n        }, '') || maskExp;\n      } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    }, {\n      key: \"_applyMask\",\n      value: function _applyMask() {\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = ['value', this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)];\n      }\n    }, {\n      key: \"_validateTime\",\n      value: function _validateTime(value) {\n        var rowMaskLen = this._maskValue.split('').filter(function (s) {\n          return s !== ':';\n        }).length;\n\n        if (!value) {\n          return null; // Don't validate empty values to allow for optional form control\n        }\n\n        if (+value[value.length - 1] === 0 && value.length < rowMaskLen || value.length <= rowMaskLen - 2) {\n          return this._createValidationError(value);\n        }\n\n        return null;\n      }\n    }, {\n      key: \"_getActualInputLength\",\n      value: function _getActualInputLength() {\n        return this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length;\n      }\n    }, {\n      key: \"_createValidationError\",\n      value: function _createValidationError(actualValue) {\n        return {\n          mask: {\n            requiredMask: this._maskValue,\n            actualValue: actualValue\n          }\n        };\n      }\n    }, {\n      key: \"_setMask\",\n      value: function _setMask() {\n        var _this14 = this;\n\n        if (this._maskExpressionArray.length > 0) {\n          this._maskExpressionArray.some(function (mask) {\n            var _a, _b;\n\n            var test = ((_a = _this14._maskService.removeMask(_this14._inputValue)) === null || _a === void 0 ? void 0 : _a.length) <= ((_b = _this14._maskService.removeMask(mask)) === null || _b === void 0 ? void 0 : _b.length);\n\n            if (_this14._inputValue && test) {\n              _this14._maskValue = mask;\n              _this14.maskExpression = mask;\n              _this14._maskService.maskExpression = mask;\n              return test;\n            } else {\n              _this14._maskValue = _this14._maskExpressionArray[_this14._maskExpressionArray.length - 1];\n              _this14.maskExpression = _this14._maskExpressionArray[_this14._maskExpressionArray.length - 1];\n              _this14._maskService.maskExpression = _this14._maskExpressionArray[_this14._maskExpressionArray.length - 1];\n            }\n          });\n        }\n      }\n    }]);\n\n    return MaskDirective;\n  }();\n\n  MaskDirective.ɵfac = function MaskDirective_Factory(t) {\n    return new (t || MaskDirective)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(MaskService), i0.ɵɵdirectiveInject(config));\n  };\n\n  MaskDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MaskDirective,\n    selectors: [[\"input\", \"mask\", \"\"], [\"textarea\", \"mask\", \"\"]],\n    hostBindings: function MaskDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"paste\", function MaskDirective_paste_HostBindingHandler() {\n          return ctx.onPaste();\n        })(\"ngModelChange\", function MaskDirective_ngModelChange_HostBindingHandler($event) {\n          return ctx.onModelChange($event);\n        })(\"input\", function MaskDirective_input_HostBindingHandler($event) {\n          return ctx.onInput($event);\n        })(\"blur\", function MaskDirective_blur_HostBindingHandler() {\n          return ctx.onBlur();\n        })(\"click\", function MaskDirective_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        })(\"keydown\", function MaskDirective_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        });\n      }\n    },\n    inputs: {\n      maskExpression: [\"mask\", \"maskExpression\"],\n      specialCharacters: \"specialCharacters\",\n      patterns: \"patterns\",\n      prefix: \"prefix\",\n      suffix: \"suffix\",\n      thousandSeparator: \"thousandSeparator\",\n      decimalMarker: \"decimalMarker\",\n      dropSpecialCharacters: \"dropSpecialCharacters\",\n      hiddenInput: \"hiddenInput\",\n      showMaskTyped: \"showMaskTyped\",\n      placeHolderCharacter: \"placeHolderCharacter\",\n      shownMaskExpression: \"shownMaskExpression\",\n      showTemplate: \"showTemplate\",\n      clearIfNotMatch: \"clearIfNotMatch\",\n      validation: \"validation\",\n      separatorLimit: \"separatorLimit\",\n      allowNegativeNumbers: \"allowNegativeNumbers\",\n      leadZeroDateTime: \"leadZeroDateTime\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(function () {\n        return MaskDirective;\n      }),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(function () {\n        return MaskDirective;\n      }),\n      multi: true\n    }, MaskService]), i0.ɵɵNgOnChangesFeature]\n  });\n  return MaskDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar MaskPipe = /*#__PURE__*/(function () {\n  var MaskPipe = /*#__PURE__*/function () {\n    function MaskPipe(_maskService) {\n      _classCallCheck(this, MaskPipe);\n\n      this._maskService = _maskService;\n    }\n\n    _createClass(MaskPipe, [{\n      key: \"transform\",\n      value: function transform(value, mask) {\n        var thousandSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        if (!value && typeof value !== 'number') {\n          return '';\n        }\n\n        if (thousandSeparator) {\n          this._maskService.thousandSeparator = thousandSeparator;\n        }\n\n        if (typeof mask === 'string') {\n          return this._maskService.applyMask(\"\".concat(value), mask);\n        }\n\n        return this._maskService.applyMaskWithPattern(\"\".concat(value), mask);\n      }\n    }]);\n\n    return MaskPipe;\n  }();\n\n  MaskPipe.ɵfac = function MaskPipe_Factory(t) {\n    return new (t || MaskPipe)(i0.ɵɵdirectiveInject(MaskApplierService, 16));\n  };\n\n  MaskPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"mask\",\n    type: MaskPipe,\n    pure: true\n  });\n  return MaskPipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @internal\n */\n\n\nfunction _configFactory(initConfig, configValue) {\n  return configValue instanceof Function ? Object.assign(Object.assign({}, initConfig), configValue()) : Object.assign(Object.assign({}, initConfig), configValue);\n}\n\nvar NgxMaskModule = /*#__PURE__*/(function () {\n  var NgxMaskModule = /*#__PURE__*/function () {\n    function NgxMaskModule() {\n      _classCallCheck(this, NgxMaskModule);\n    }\n\n    _createClass(NgxMaskModule, null, [{\n      key: \"forRoot\",\n      value: function forRoot(configValue) {\n        return {\n          ngModule: NgxMaskModule,\n          providers: [{\n            provide: NEW_CONFIG,\n            useValue: configValue\n          }, {\n            provide: INITIAL_CONFIG,\n            useValue: initialConfig\n          }, {\n            provide: config,\n            useFactory: _configFactory,\n            deps: [INITIAL_CONFIG, NEW_CONFIG]\n          }, MaskApplierService]\n        };\n      }\n    }, {\n      key: \"forChild\",\n      value: function forChild() {\n        return {\n          ngModule: NgxMaskModule\n        };\n      }\n    }]);\n\n    return NgxMaskModule;\n  }();\n\n  NgxMaskModule.ɵfac = function NgxMaskModule_Factory(t) {\n    return new (t || NgxMaskModule)();\n  };\n\n  NgxMaskModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxMaskModule\n  });\n  NgxMaskModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return NgxMaskModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n(function () {\n  if (!commonjsGlobal.KeyboardEvent) {\n    commonjsGlobal.KeyboardEvent = function (_eventType, _init) {};\n  }\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation }; //# sourceMappingURL=ngx-mask.mjs.map","map":null,"metadata":{},"sourceType":"module"}